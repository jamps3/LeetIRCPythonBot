name: Run Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install minimal required dependencies for testing
          pip install python-dotenv pytest
          # Don't install optional dependencies as they are mocked in tests
          # Install test dependencies if we had a requirements.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Setup test environment
        run: |
          # Create a basic .env file for testing
          echo "BOT_NAME=TestBot" > .env
          echo "BOT_VERSION=test" >> .env
          echo "IRC_NICKNAME=test_bot" >> .env
          echo "IRC_REALNAME=Test Bot" >> .env
          echo "IRC_IDENT=testbot" >> .env
          echo "SERVER_HOST=irc.example.com" >> .env
          echo "SERVER_PORT=6667" >> .env
          echo "SERVER_NAME=TestServer" >> .env
          echo "CHANNELS=#test" >> .env
          echo "LOG_LEVEL=INFO" >> .env
          echo "TAMAGOTCHI_ENABLED=true" >> .env
          echo "USE_NOTICES=false" >> .env

          # Debug: Show the environment
          echo "Current directory: $(pwd)"
          echo "Python version: $(python --version)"
          echo "Python path:"
          python -c "import sys; [print(f'  {p}') for p in sys.path]"
          echo "Files in current directory:"
          ls -la

      - name: Run tests
        run: |
          # Set PYTHONPATH to include current directory
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          echo "Running all tests with pytest..."
          python -m pytest -v --tb=short
        env:
          # Set dummy environment variables for testing
          IRC_NICKNAME: test_bot
          BOT_NAME: TestBot
          TAMAGOTCHI_ENABLED: true
          USE_NOTICES: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.txt
            test-coverage.txt
          if-no-files-found: warn
          retention-days: 30

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Check code formatting with Black
        run: |
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --extend-ignore=E203,E501,F401,F841,E402 --statistics

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security linter
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30
